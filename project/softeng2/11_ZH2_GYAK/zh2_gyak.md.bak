# Minta feladatsor 2. ZH-hoz



## 1. rész: webalkalmazás készítése

### 1.1 Porojekt létrehozása, előkészületek

❶ Hozz létre projektet az ASP .NET Web API template alapján, melyben endedélyezed a 

- Swagger használatát
- Controllerek használatát

A projekt neve a zh-ban adott lesz, most tetszőleges.

❷ Módisítsd a `program.cs`-t úgy, hogy a webalkalmazás middleware-ek használatával 

- kiszolgálja a `wwwroot` könyvtárban lévő statikus állományokat,
- automatikusan alapértelmezett fájlokat szolgáltasson ki a `wwwroot` könyvtárból, ha egy URL nem hivatkozik konkrét fájlra (`index.html`,`default.html`,`index.htm`,`default.htm`).



> [!TIP]
>
> A sorrend a middleware-eknél fontos! 
>
> ```cs
> app.UseDefaultFiles(); // Engedélyezi az alapértelmezett fájlok keresését
> app.UseStaticFiles();  // Kiszolgálja a statikus fájlokat, például HTML, CSS
> ```

❸ Hozd létre a `wwwroot` könyvtárat az alkalmazásmappában, és helyezz el benne egy `index.html` állományt tesztelésre alkalmas egyszerű HTML tartalommal (Pl. *Hello Wolrd!*)

❹ Készítsd el az ORM állományokat a következő adatbázishoz:

```
```

> [!IMPORANT]
>
> Futtatás után meg kell jelennie az index.html-ben lévő szövegnek.



### 1.2 API Controllerek létrehozása

❻ Fejtsd ki a  `GET`  metódut, mely a teljes tábla tartalmát visszaadja!

> [!Tip]
>
> A metódus visszatérési típusát írd át `IActionResult` típusúra, mert így használhatod a `return Ok();`, `return NotFound();`, stb. metódusokat!

 - **GET /api/books**
 - Leírás: Az összes könyv listázása.
 - Példa válasz:
   ```json
   [
     { "id": 1, "title": "Egri csillagok", "author": "Gárdonyi Géza", "year": 1899, "genre": "Történelmi", "isAvailable": true },
     { "id": 2, "title": "A Pál utcai fiúk", "author": "Molnár Ferenc", "year": 1906, "genre": "Ifjúsági", "isAvailable": false }
   ]
   ```

❼ Egy könyv lekérdezése azonosító alapján

Fejtsd ki a  `GET`  metódut, mely a route-ban átadott kulcsú rekordot adja vissza! 



A metódust kiegészítve kezeld azt az esetet, amikor az adatbázisban nem szerepel a kért azonosítóval rekord! Használd az `Ok()` és a `NotFound` függvényeket a válasz előállításához. 

❽ Új könyv hozzáadása

Fejtsd ki a  `POST`  metódut, mely új rekordot szúr be a táblába!

> [!WARNING]
>
> Ha az adatbázis táblában az elsődleges kulcs automatikusan számozódik (IDENTITY), nem szabad értéket adni neki új rekord beszúrásakor, mert az az SQL szerver felől hibaüzenethez vezet.



❾ Könyv törlése

Fejtsd ki a  `DELETE`  metódut, mely törli a route-ban megdott kulcsú rekordot az adatbázisból! 







A `DELETE` metódust kiegészítve kezeld azt az esetet, amikor az adatbázisban nem szerepel a kért azonosítóval rekord. Használd az `Ok()` és a `NotFound` függvényeket a válasz előállításához. 



> [!IMPORTANT]
>
> Használd a Swaggert az API Controllerek működésének ellenőrzésére! Nincs értelme addig továbbmenni a webes frontend tervezésére, amíg az API Controllerek nem működnek az elvárásoknak megfelelően! 

### 1.3 HTML frontend készítése az alkalamzáshoz



## 2. rész: asztali alkalmazás készítése

Ugyanebbe a Solution-be készíts egyszerű asztali Windows Forms alkalmazást, amely egy egyszerű `DataGridView` lehetővé teszi a tábla szerkesztését.

> [!TIP]
>
> Ha egy solution-ben több projekt is van, a Solution Explorer-ben a jobb egérgomb megnyomására felugró helyi menüben elérhető "Set as Startup Project" menüponttal lehet kiválasztani, hogy melyik projekt induljon el a ▶ gombra kattintva. 